#! /usr/bin/env python
# encoding: utf-8

import sys

def configure(conf):
	path = conf.path.abspath()
	
	# get Makefile path
	conf.env.OPENAL_MAKEPATH = path
	
	# detect platform
	if sys.platform.startswith('cygwin'):
		conf.env.append_unique('STLIB', ['winm'])
	elif sys.platform.startswith('darwin'):
		#???
		#conf.env.append_unique('FRAMEWORK', ['Cocoa', 'OpenGL'])
		pass
	elif sys.platform.startswith('linux'):
		conf.env.append_unique('LIB', ['asound'])
		conf.env.append_unique('LINKFLAGS', ['-pthread'])
	elif sys.platform.startswith('win32'):
		conf.env.append_unique('STLIB', ['winm'])
	else:
		conf.fatal('cannot find target platform for asound')
	
	# add lib to env
	conf.env.append_unique('INCLUDES', path + '/include')

def build(bld):
	path = bld.path.find_node('/').get_bld().abspath()
	
	# cmake (force run)
	taskgen_cmake = bld(rule='mkdir -p ' + path + ' && cd ' + path + ' && cmake -DLIBTYPE=STATIC -DDLOPEN=OFF -DPORTAUDIO=OFF -DOSS=FALSE ' + bld.env.OPENAL_MAKEPATH, name='openal_cmake', always=True)
	taskgen_cmake.post()
	task_cmake = taskgen_cmake.tasks[0]
	task_cmake.run()
	
	taskgen_make = bld(rule='make --directory=' + path, name='openal_make', always=True)
	taskgen_make.post()
	task_make = taskgen_make.tasks[0]
	task_make.run()
	
	bld.read_stlib('openal', paths = [path])
	print(bld.path.abspath())
	
