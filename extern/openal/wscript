#! /usr/bin/env python
# encoding: utf-8

import re
import sys
from waflib.TaskGen import feature

@feature('cmake')
def cmake_config(self):
	srcpath = self.srcpath
	bldpath = self.bldpath
	self.bld(rule='mkdir -p ' + bldpath + ' && cd ' + bldpath + ' && cmake -DLIBTYPE=STATIC -DDLOPEN=OFF -DOSS=OFF ' + srcpath)
	self.source= []

def configure(conf):
	path = conf.path.abspath()
	
	# execute cmake
	bldpath = conf.path.find_node('/').get_bld().abspath()
	conf.check_cxx(features='cmake', msg='config openal', srcpath=path, bldpath=bldpath)
	
	# read openal config
	cmake_cache_file = open(bldpath + '/CMakeCache.txt', 'r')
	cmake_cache = cmake_cache_file.read()
	cmake_cache_file.close()
	cmake_cache_libs = re.search(r'''openal_LIB_DEPENDS:STATIC=.*''', cmake_cache).group(0)
	for part in re.findall(r'''(general;\w*;)''', cmake_cache):
		lib = re.search(r'''general;(\w*);''', part).group(1)
		conf.env.append_unique('LIB', [lib])
	
	# add lib to env
	conf.env.append_unique('INCLUDES', path + '/include')

def build(bld):
	path = bld.path.find_node('/').get_bld().abspath()
	
	# make (force run)
	taskgen_make = bld(rule='make --directory=' + path, name='openal_make', always=True)
	taskgen_make.post()
	task_make = taskgen_make.tasks[0]
	task_make.run()
	
	bld.read_stlib('openal', paths = [path])
	
